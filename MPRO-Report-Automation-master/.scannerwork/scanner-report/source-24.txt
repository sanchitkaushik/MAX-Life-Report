package com.maxlifeinsurance.mpro.daoimpl;

import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

import org.bson.Document;

import com.amazonaws.services.lambda.runtime.Context;
import com.maxlifeinsurance.mpro.config.DbConfig;
import com.maxlifeinsurance.mpro.dao.AxisMproYtdReportDao;
import com.maxlifeinsurance.mpro.dto.Proposal;
import com.maxlifeinsurance.mpro.utils.GetDateAndTime;
import com.maxlifeinsurance.mpro.utils.StringConstants;
import com.mongodb.client.MongoCollection;

public class AxisMproYtdReportDaoImpl implements AxisMproYtdReportDao {

	static ResourceBundle res = ResourceBundle.getBundle("application");
	static String mongoDatabaseName = res.getString("mongoDatabaseName");
	static String mongoCollectionName = res.getString("mongoCollectionName");

	@Override
	public List<Proposal> getAxisYtdReportData(Context context) {
		List<Proposal> proposalDocumentList = null;
		try {
			MongoCollection<Document> collection = new DbConfig().getDbConnection(mongoDatabaseName, context);
//          Below connectivity is used for testing in local env.
//			MongoCollection<Document> collection = new DbConfigForLocal().getDbConnection(mongoDatabaseName);
			Document projection = new Document("_id", 0)
					.append("bancaDetails.bancaId", 1)
					.append("applicationDetails.policyNumber", 1)
					.append("applicationDetails.createdTime", 1)
					.append("sourcingDetails.specifiedPersonDetails.spSSNCode", 1)
					.append("channelDetails.branchCode", 1)
					.append("bank.paymentRenewedBy", 1)
					.append("applicationDetails.stage", 1)
					.append("paymentDetails.receipt.premiumMode", 1)
					.append("paymentDetails.receipt.modeOfPayment", 1)
					.append("productDetails.productType", 1)
					.append("bancaDetails.customerId", 1)
					.append("partyInformation.basicDetails.firstName", 1)
					.append("partyInformation.basicDetails.lastName", 1)
					.append("productDetails.productInfo.productIllustrationResponse.coverageTerm", 1)
					.append("productDetails.productInfo.productIllustrationResponse.premiumPaymentTerm", 1)
					.append("productDetails.productInfo.planCode", 1)
					.append("productDetails.productInfo.planCodeTPP", 1)
					.append("productDetails.productInfo.planCodePOSV", 1)
					.append("productDetails.productInfo.planCodeMFSA", 1)
					.append("productDetails.productInfo.productName", 1)
					.append("bancaDetails.leadId", 1)
					.append("sourcingDetails.specifiedPersonDetails.spCode", 1)
					.append("productDetails.productInfo.productIllustrationResponse.modalPremium", 1)
					.append("productDetails.productInfo.productIllustrationResponse.requiredModalPremium", 1)
					.append("partyInformation.basicDetails.gender", 1)
					.append("partyInformation.basicDetails.nationalityDetails.nationality", 1)
					.append("partyInformation.basicDetails.dob", 1)
					.append("productDetails.productInfo.productIllustrationResponse.effectiveDate", 1)
					.append("bancaDetails.customerClassification", 1)
					.append("partyInformation.basicDetails.occupation", 1)
					.append("partyInformation.basicDetails.annualIncome", 1)
					.append("productDetails.productInfo.productIllustrationResponse.sumAssured", 1)
					.append("productDetails.productInfo.modeOfPayment", 1)
					.append("productDetails.productInfo.productIllustrationResponse.firstYearWOPPlusRiderPremiumSummary", 1)
					.append("productDetails.productInfo.productIllustrationResponse.wopPlusRiderTerm", 1)
					.append("productDetails.productInfo.productIllustrationResponse.wopPlusRiderSumAssured", 1)
					.append("productDetails.productInfo.productIllustrationResponse.firstYearPartnerCareRiderPremiumSummary", 1)
					.append("productDetails.productInfo.productIllustrationResponse.partnerCareRiderTerm", 1)
					.append("productDetails.productInfo.productIllustrationResponse.partnerCareRiderSumAssured", 1)
					.append("productDetails.productInfo.productIllustrationResponse.firstYearAccidentCoverRiderPremiumSummary", 1)
					.append("productDetails.productInfo.productIllustrationResponse.accidentCoverRiderTerm", 1)
					.append("productDetails.productInfo.productIllustrationResponse.firstYearTermPlusRiderPremiumSummary", 1)
					.append("productDetails.productInfo.productIllustrationResponse.termPlusRiderTerm", 1)
					.append("productDetails.productInfo.productIllustrationResponse.termPlusRiderSumAssured", 1)
					.append("productDetails.productInfo.productIllustrationResponse.firstYearADDRiderPremiumSummary", 1)
					.append("productDetails.productInfo.productIllustrationResponse.addRiderTerm", 1)
					.append("productDetails.productInfo.productIllustrationResponse.addRiderSumAssured", 1)
					.append("productDetails.productInfo.productIllustrationResponse.accidentCoverRiderSumAssured", 1)
					.append("productDetails.productInfo.productIllustrationResponse.firstYearAcceleratedCriticalIllnessRiderPremiumSummary", 1)
					.append("productDetails.productInfo.productIllustrationResponse.acceleratedCriticalIllnessRiderTerm", 1)
					.append("productDetails.productInfo.productIllustrationResponse.acceleratedCriticalIllnessRiderSumAssured", 1)
					.append("productDetails.productInfo.productIllustrationResponse.CABRiderTerm", 1)
					.append("productDetails.productInfo.productIllustrationResponse.CABRiderSumAssured", 1)
					.append("productDetails.productInfo.productIllustrationResponse.CABRiderPremium", 1)
					.append("productDetails.productInfo.riderDetails", 1)
					.append("productDetails.productInfo.productIllustrationResponse.atp", 1)
					.append("productDetails.productInfo.productIllustrationResponse.afyp", 1);

			Document whereCondition = new Document();
			whereCondition.append("channelDetails.channel", StringConstants.X)
						  .append("applicationDetails.createdTime", new Document("$gte",GetDateAndTime.getPreviousMonthDate(context)))
						  .append("applicationDetails.stage", new Document("$gte","2"));
			proposalDocumentList = collection.find(whereCondition, Proposal.class).projection(projection).into(new ArrayList<>());
			context.getLogger().log("Total record count is :: " + proposalDocumentList.size());

		} catch (Exception ex) {
			ex.printStackTrace();
			context.getLogger().log("Exception occured in getAxisYtdReportData while fetching data from mongo db :: " + ex);
		}
		return proposalDocumentList;
	}
}
