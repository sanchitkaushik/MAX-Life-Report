package com.maxlifeinsurance.mpro.utils;

import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.Date;

import com.amazonaws.services.lambda.runtime.Context;

/**
 * This class contains static method which are used to get dates as per
 * requirement
 * 
 * @author Qualtech
 */
public class GetDateAndTime {

	/**
	 * This is static method used get 7 day previous date in format 2020/09/12
	 * 
	 * @param context
	 * @return date
	 */
	public static Date get7DaysPreviousDate(Context context) {
		Date date = null;
		try {

			Calendar clr = Calendar.getInstance();
			clr.add(Calendar.DATE, -7);
			int year = clr.get(Calendar.YEAR);
			int month = clr.get(Calendar.MONTH);
			int day = clr.get(Calendar.DATE);
			date = new Date();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
			String dateInString = year + "/" + (month + 1) + "/" + (day + 1);
			date = sdf.parse(dateInString);
		} catch (Exception ex) {

		}
		return date;
	}
	
	
	/**
	 * This is static method used get 7 day previous date in format 2020/09/12
	 * 
	 * @param context
	 * @return date
	 */
	public static Date getPreviousMonthDate(Context context) {
		Date date = null;
		try {

			Calendar clr = Calendar.getInstance();
			int year = clr.get(Calendar.YEAR);
			int month = clr.get(Calendar.MONTH);
			if(month == 0){
				month = 1;
			}
			date = new Date();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
			String dateInString = year + "/" + (month) + "/" + "1";
			date = sdf.parse(dateInString);
		} catch (Exception ex) {
//			ex.printStackTrace();
		}
		return date;
	}
	
//	public static void main(String[] args) {
//		getPreviousMonthDate(null);
//	}
	
	

	/**
	 * This static method used to format date string in date in this format
	 * 2020/09/28
	 * 
	 * @param context
	 * @param minusDate
	 * @return date
	 */
	public static Date getPreviousDate(Context context, int minusDate) {
		Date date = null;
		try {
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			date = sdf.parse(LocalDate.now().minusDays(minusDate).toString());
		} catch (Exception e) {

		}
		return date;
	}

}
